name: Build aleph

on:
  workflow_dispatch: {}
  push:
    paths-ignore:
      - "ui/**"
      - "docs/**"

permissions:
  packages: write

jobs:
  docker-build-aleph:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up
        run: |
          sudo sysctl -w vm.max_map_count=262144
          sudo echo "ALEPH_SECRET=batman\n" >> aleph.env
          echo "${GITHUB_REF}"
          docker --version
          docker compose --version

      - name: Docker pull services
        run: |
          docker compose pull --quiet elasticsearch ingest-file
          make ALEPH_TAG=${GITHUB_SHA} services

      - name: Build docker image
        run: docker build -t ghcr.io/dataresearchcenter/openaleph:${GITHUB_SHA} .

      - name: Install development dependencies
        run: make dev
        env:
          PIP_BREAK_SYSTEM_PACKAGES: 1

      - name: Check code formatting
        run: make format-check

      - name: Run linter
        run: make lint

      - name: Run aleph tests
        run: make ALEPH_TAG=${GITHUB_SHA} test

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/dataresearchcenter/openaleph
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release
        uses: docker/build-push-action@v3
        with:
          context: .
          # platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && !startsWith(github.ref, 'refs/tags/test-') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
